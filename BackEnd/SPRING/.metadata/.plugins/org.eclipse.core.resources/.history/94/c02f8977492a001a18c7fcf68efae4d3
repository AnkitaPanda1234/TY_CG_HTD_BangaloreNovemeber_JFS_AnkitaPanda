package com.capgemini.productspringboot.dao;

import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.EntityTransaction;
import javax.persistence.PersistenceUnit;
import javax.persistence.PersistenceUnits;
import javax.persistence.TypedQuery;

import org.springframework.stereotype.Repository;

import com.capgemini.productspringboot.dto.ProductBean;
import com.capgemini.productspringboot.exception.ProductException;
import com.capgemini.springboot.dto.EmployeeBean;
import com.capgemini.springboot.exception.EmployeeException;
@Repository
public class ProductDaoImpl implements ProductDao {
	@PersistenceUnit
   private EntityManagerFactory factory;
	@Override
	public boolean addProduct(ProductBean bean) {
		EntityManager manager=factory.createEntityManager();//one per operation alws local
		EntityTransaction transaction=manager.getTransaction();
		ProductBean productbean=new ProductBean();
		productbean.setId(bean.getId());
		productbean.setCost(bean.getCost());
		productbean.setImageUrl(bean.getImageUrl());
		productbean.setName(bean.getName());
		transaction.begin();
		try {
			manager.persist(productbean);
			transaction.commit();
			return true;
		}catch(Exception e)
		{
			e.printStackTrace();
			throw new ProductException("product Already exits");
		}
	}

	@Override
	public ProductBean getProduct(int id) {
		String jpql="from EmployeeBean where id=:id";
		EntityManager manager=factory.createEntityManager();
		TypedQuery <ProductBean>query=manager.createQuery(jpql,ProductBean.class);
		
		query.setParameter("id", id);
		try {
			return query.getSingleResult();
		}catch(Exception e)
		{
			e.printStackTrace();
			return null;
		}
		
	}

	@Override
	public List<ProductBean> getAllProduct() {
		String jpql="from ProductBean";
		EntityManager manager=factory.createEntityManager();
		TypedQuery <ProductBean>query=manager.createQuery(jpql,ProductBean.class);
		return query.getResultList();
		
	}

	@Override
	public boolean updateProduct(int id, ProductBean bean) {
		EntityManager manager=factory.createEntityManager();
		  EntityTransaction transaction=manager.getTransaction();
		  transaction.begin();
		  ProductBean bean1=manager.find(ProductBean.class, id);
		  bean.setCost(bean.getCost());
		  bean.setName(bean.getName());
		  bean.setImageUrl(bean.getImageUrl());
		 
		  transaction.commit();
			return true;
	}

	@Override
	public boolean deleteProduct(int id) {
		EntityManager manager=factory.createEntityManager();
		  EntityTransaction transaction=manager.getTransaction();
		  transaction.begin();
		  ProductBean bean=manager.find(ProductBean.class, id);
		  if(bean!=null)
		  {
			  manager.remove(bean);
			  transaction.commit();
			  return true;
		  }
		
		throw new ProductException("Product Not Found");
	}

}
